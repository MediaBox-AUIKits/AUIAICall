plugins {
    id 'com.android.library'
}

android {
    compileSdk androidCompileSdkVersion

    defaultConfig {
        minSdk androidMinSdkVersion
        targetSdk androidTargetSdkVersion

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME : 'aicall']
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {

    implementation externalAndroidXAppcompat
    implementation externalAndroidDesign
    implementation externalAndroidXConstraintlayout
    testImplementation externalJunit
    androidTestImplementation externalTestJunit
    androidTestImplementation externalEspresso
    implementation externalAndroidAnnotation

    implementation externalDialogPlus
    implementation (externalRecyclerViewAdapterHelper) {
        exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-jdk7'
    }
    implementation externalSmartRefreshLayutKernel     //核心必须依赖
    implementation externalSmartRefreshLayutHeader    //经典刷新头
    implementation externalSmartRefreshLayutFooter   //经典加载
    implementation (externalPermissionX) {
        exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-jdk7'
    }
    implementation externalStyleableToast
    implementation externalSimpleZXing

    implementation externalARouter
    annotationProcessor externalARouterCompiler


    if(UseAiCallKitAAR()) {
        println("USE_AICALLKIT_AAR yes")
        implementation 'com.aliyun.auikits.android:ARTCAICallKit:1.0.0'
    } else {
        println("USE_AICALLKIT_AAR no")
        implementation project(':AUIAICallEngine')
        implementation project(':ARTCAICallKit')
    }
    implementation externalOKHTTP
    implementation externalOKHTTPLogInterceptor
    implementation externalAllInOne
    implementation project(':AUIBaseKits::AUICommon')
}

def UseAiCallKitAAR() {
    if (findProperty('USE_AICALLKIT_AAR') == null) {
        return false
    } else {
        return Boolean.valueOf(USE_AICALLKIT_AAR)
    }
}
